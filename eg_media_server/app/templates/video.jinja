<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Video {{title}}</title>
  <style>
    html, body { margin: 0; padding: 0; height: 100%; }
    body { font-family: sans-serif; display: flex; flex-direction: column; align-items: center; text-align: center; }
    main { display: flex; flex: 1; align-items: center; overflow: hidden; }
    h1 { font-size: 1em; margin: 0; }
    p { margin: 2px; }
    span { font-weight: bold; }
    button:focus { background-color: #00ffff; }
    video { height: 100%; max-width: 100%; max-height: 100%; object-fit: contain; display: block; }
  </style>
</head>
<body>
  <header>
    <h1>{{title}}</h1>
    <p>
      <button id="exit" onclick="exit()">Zurück zum Verzeichnis</button>
      <button id="play" onclick="togglePlay()">Abspielen</button>
      <button id="backward" onclick="backward()">Rückspulen</button>
      <span id="runtime">00:00</span> von <span id="duration">--:--</span> min
      <button id="forward" onclick="forward()">Vorspulen</button>
      <button id="full" onclick="setFullScreen()">Vollbild</button>
    </p>
  </header>
  <main>
    <video id="video">
      <source src="/file?path={{source}}" type="{{mime}}">
    </video>
  </main>
  <script>
    window.addEventListener("load", adjustHeight);
    window.addEventListener("resize", adjustHeight);
    document.addEventListener('fullscreenchange', fullScreenChanged);
    document.addEventListener('keydown', (event) => { keyDown(event); });

    const video = document.getElementById("video");
    video.addEventListener('loadedmetadata', () => {
      document.getElementById('duration').textContent = formatTime(video.duration);
    });
    video.addEventListener('timeupdate', () => {
      document.getElementById('runtime').textContent = formatTime(video.currentTime);
    });

    document.getElementById('play').focus();

    function formatTime(seconds) {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }

    function togglePlay() {
      const btn = document.getElementById("play");
      if (video.paused) {
        video.play();
        btn.innerText = "Anhalten"
      } else {
        video.pause();
        btn.innerText = "Abspielen"
      }
      btn.focus();
    }

    function backward() {
      video.currentTime = Math.max(0, video.currentTime - 10);
      document.getElementById("backward").focus();
    }

    function forward() {
      video.currentTime = Math.min(video.duration, video.currentTime + 10);
      document.getElementById("forward").focus();
    }

    function setFullScreen() {
      if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
      } else {
        document.documentElement.webkitRequestFullscreen();
      } 
    }

    function exit() {
      const url = new URL('/folder', window.location.origin);
      url.searchParams.set('path', "{{folder}}");
      url.searchParams.set('focus', "{{file}}");
      window.location.href = url.toString().replace(/%2F/g, "/").replace(/\+/g, "%20");
    }

    function adjustHeight() {
      const h = window.innerHeight;
      document.body.style.height = h + "px";
    }

    function keyDown(event) {
      if (document.fullscreenElement) {
        event.preventDefault();
        if (event.key === 'ArrowRight') {
          forward();
        } else if (event.key === 'ArrowLeft') {
          backward();
        }
      } else {
        if (event.key == 'ArrowUp') {
          document.getElementById("full").focus();
        } else if (event.key == 'ArrowDown') {
          document.getElementById("exit").focus();
        }
      }
    }

    function fullScreenChanged() {
      if (document.fullscreenElement) {
        document.querySelector('header').style.display = 'none';
      } else {
        document.querySelector('header').style.display = 'block';
        document.getElementById('full').focus();
      }
    }
  </script>
</body>
</html>
